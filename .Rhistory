contour(x,y,f)
y <- x
f<-outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
m1 <- matrix(c(0,0,0,0),2,2)
m1
isSymmetric(m1)
m2 <- matrix(c(0,0,0,1),2,2)
m2
isSymmetric(m2)
em1<-eigen(m1)
em2<-eigen(m2)
em1$values
em2$values
m3<-matrix(c(1,0,1,0),2,2)
m3
m3<-matrix(c(1,0,0,1),2,2)
m3
em3<-eigen(m3)
em3$values
em1$values
7 * cos(100)
cos(100)
?cos
cos(pi*100)
pi
cospi(100)
?deg
?degrees
rad<-function(deg){
deg * (180/pi)
}
rad(100)
cos(rad(100))
rad<-function(deg){
deg * pi / 180
}
rad(100)
cos(rad(100))
f1<-function(mag, deg){
c(mag * cos(rad(deg)), mag * sin(rad(deg)))
}
f1(7,100)
f1(5,290)
h1<-function(v1, v2){f1(v1) + f1(v2)}
h1<-function(m1,d1, m2,d2){f1(m1,d1) + f1(m2,d2)}
h1(7,100, 5,290)
asvector<-function(mag, deg){
c(mag * cos(rad(deg)), mag * sin(rad(deg)))
}
asvector(7,100) - asvector(5,290)
asvector(7,100)
asvector(5,100)
asvector(7,100) + asvector(5,290)
asvector(7,160) + asvector(9,20)
asvector(8,140) + asvector(4,40)
asvector(8,100) + asvector(3,210)
asvector(7,170) + asvector(4,30)
asvector(5,320) + asvector(4,250)
asvector(3,310) + asvector(8,190)
library(numDeriv)
install.packages(numDeriv)
install.packages("numDeriv")
library(numDeriv)
f <- function(x) {
x1 <- x[1]; x2 <- x[2]; x3 <- x[3]
sin(x1*x2)+cos(x3)
}
gradient <- grad(f, x=1:3)
gradient
?grad
hess <- hessian(f, x=1:3)
hess
q2 <- matrix(c(1, 0.5, 2, 1),2,2)
q2
q2 <- matrix(c(1, 0.5, 2, 1),2,2, byrow = TRUE)
q2
eq2 <- eigen(q2)
eq2$values
rad<-function(deg){
deg * pi / 180
}
f2 <- function(x1, x2, x3){
c(sin(rad(x1))+ x3, x1*x2*x3)
}
f2(1,2,3)
grad(f2,x=c(0,0,0))
0:0:2
0:0:0
f2 <- function(x){
x1 <- x[1]; x2 <- x[2]; x3 <- x[3]
c(sin(rad(x1))+ x3, x1*x2*x3)
}
f2(c(1,2,3))
grad(f2,x=c(0,0,0))
sin(rad(0))
sin(0)
A <- matrix(c(8, -1, 2, -1, 2, -2, 2,-2, 3), 3,3, byrow = TRUE)
A
det(A)
detOfA <- det(A)
install.packages("pracma")
library(pracma)
A <- matrix(c(1,2,1,2,2,2,1,0,1), 3,3,byrow = TRUE)
A
rref(A)
rank(A)
rank(rref(A))
Ar<-rref(A)
rank(Ar)
?rank
rankMatrix(A)
library(Matrix)
rankMatrix(A)
Arank <-rankMatrix(A)
Arank
A <- matrix(c(1,2,1,2,2,2,1,0,1), 3,3,byrow = TRUE)
A
Arank <-rankMatrix(A)
Arank
A.rref
A.rref<-rref(A)
A.rref
Arank <-rankMatrix(A)
Arank
?rankMatrix
determinant(A)
unlist(determinant(A))
det(A)
A
A <- matrix(c(8, -1, 2, -1, 2, -2, 2,-2, 3), 3,3, byrow = TRUE)
det(A)
Arank <-rankMatrix(A)
Arank
A.rref
A
det(A)
k<-matrix(c(4,-1,2,-1,3,1,0,2,1),3,3,byrow = TRUE)
k
det(k)
k<-matrix(c(2,3,1,1,5,-2,2,5,2),3,3,byrow = TRUE)
det(k)
det(matrix(c(0,-1,2,1,2,-1,-1,2,-1)3,3,byrow=TRUE))
det(matrix(c(0,-1,2,1,2,-1,-1,2,-1),3,3,byrow=TRUE))
A <- matrix(c(8, -1, 2, -1, 2, -2, 2,-2, 3), 3,3, byrow = TRUE)
detOfA <- det(A)
A.rref<-rref(A)
A.rref
Arank <-rankMatrix(A)
Arank
eigen(A)
a<-c(2,9,-3)
b<-c(-3,-4,8)
dot(a,b)
lengths(a)
length(a)
sum(a^2)
sum(b^2)
a.eigen<-eigen(A)
a.eigen$vectors[1,1]
a.eigen$vectors[1,3]
a.eigen$vectors[3,1]
a.eigen$vectors[1,]
a.eigen$vectors[,1]
a.eigen$vectors
a.eigen$vectors[,1]
sum(a.eigen$vectors[,1])
sqrt(sum(a.eigen$vectors[,1]))
a.mag <-sqrt(sum(a.eigen$vectors[,1]^2))
b.mag <-sqrt(sum(a.eigen$vectors[,2]^2))
sum(a.eigen$vectors[,1]^2)
a.eigen$vectors[1,1]
a.eigen$vectors[1,1]^2
a.eigen$vectors[2,1]^2
a.eigen$vectors[3,1]^2
a.eigen$vectors[1,1]^2 +
a.eigen$vectors[2,1]^2 +
a.eigen$vectors[3,1]^2
plot(cars)
plot(cars)
M <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
M <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
M
M <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(M)
M <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print.matrix(M)
library(base)
M <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print.matrix(M)
print.default(M)
print(M)
library(base)
M <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(M)
library(base)
M <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(M)
A <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(A)
det(A)
det(A)
qr(A)$rank
v<- matrix(c(1,2,3,4),2,2,byrow = TRUE)
v
det(v)
qr(v)$rank
library(pracma)
rref(v)
MatrixRank(v)
A <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(A)
det(A)
qr(A)$rank
library(pracma)
rref(A)
A <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(A)
det(A)
qr(A)$rank
library(pracma)
rref(A)
A.eigen <- eigen(A)
A.eigen
A.eigen <- eigen(A)
A.eigen
library(pracma)
rref(A)
acos(.866)
torad<-function(deg){
deg * pi / 180
}
cos(90)
cos(torad(90)
cos(torad(90)
)
cos(torad(90))
cos(90)
torad(90)
torad(100)
cos(torad(100))
rad<-function(deg){
deg * pi / 180
}
rad(100)
cos(rad(100))
cos(rad(90))
cos(rad(45))
?%%
?%%
acos(0.7071)
?%%
asin(0.7071)
degs<-function(rads) {
rads*180/pi
}
?%%
degs(asin(0.7071))
?%%
degs(round(asin(0.7071),0)
degs(round(asin(0.7071),0)
degs(round(asin(0.7071),digits=0)
degs(round(asin(0.7071),digits=0))
degs(asin(0.7071))
degs<-function(rads) {
round(rads*180/pi, digits = 0)
}
degs(asin(0.7071))
theta <- function(v1, v2){
dot(v1, v2) / (sqrt(sum(v1^2)) * sqrt(sum(v2^2)))
}
a<-c(1,2,3,4)
b<-c(5,6,7,8)
theta(a,b)
theta <- function(v1, v2){
acos(dot(v1, v2) / (sqrt(sum(v1^2)) * sqrt(sum(v2^2))))
}
a<-c(1,2,3,4)
b<-c(5,6,7,8)
theta(a,b)
theta <- function(v1, v2){
degs(acos(dot(v1, v2) / (sqrt(sum(v1^2)) * sqrt(sum(v2^2)))))
}
theta(a,b)
degs<-function(rads) {
round(rads*180/pi, digits = 0)
}
theta <- function(v1, v2){
degs(acos(dot(v1, v2) / (sqrt(sum(v1^2)) * sqrt(sum(v2^2)))))
}
theta(A[,1], A[,2])
install.packages("rmarkdown")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
a <- matrix(c(0,-1,2,0,-2,1),3,2,byrow = TRUE)
b <- matrix(c(1,0,1,1,2,0,1,-1,3,1,0,2), 3,4,byrow = TRUE)
a <- matrix(c(0,-1,2,0,-2,1),3,2,byrow = TRUE)
b <- matrix(c(1,0,1,1,2,0,1,-1,3,1,0,2), 3,4,byrow = TRUE)
dot(a,b)
a <- matrix(c(0,-1,2,0,-2,1),3,2,byrow = TRUE)
b <- matrix(c(1,0,1,1,2,0,1,-1,3,1,0,2), 3,4,byrow = TRUE)
a %*% b
a <- matrix(c(0,-1,2,0,-2,1),2,3,byrow = TRUE)
b <- matrix(c(1,0,1,1,2,0,1,-1,3,1,0,2), 3,4,byrow = TRUE)
a %*% b
a <- matrix(c(0,-1,2,0,-2,1),2,3,byrow = TRUE)
b <- matrix(c(1,0,1,1,2,0,1,-1,3,1,0,2), 3,4,byrow = TRUE)
a
b
a %*% b
library("pracma", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("matlab")
library("matlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(matlab)
A <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(A)
det(A)
qr(A)$rank
rref(A)
library(matlab)
library(pracma)
A <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(A)
det(A)
qr(A)$rank
rref(A)
A.eigen <- eigen(A)
A.eigen
degs<-function(rads) {
round(rads*180/pi, digits = 0)
}
theta <- function(v1, v2){
degs(acos(dot(v1, v2) / (sqrt(sum(v1^2)) * sqrt(sum(v2^2)))))
}
theta(A.eigen$vectors[,1], A.eigen$vectors[,2])
install.packages("matrixcalc")
library("matrixcalc")
A.eigen
is.positive.definite(A)
calculation.e <- function(v, t){
tinv <- inv(t)
prd <- t(tinv) %*% v
t(prd) %*% t
}
calculation.e(A, A.eigen$vectors)
sum(diag(A))
A %*% A
library("matrixcalc", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(matlab)
library(pracma)
library("matrixcalc")
A <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(A)
det(A)
qr(A)$rank
rref(A)
A.eigen <- eigen(A)
A.eigen
degs<-function(rads) {
round(rads*180/pi, digits = 0)
}
theta <- function(v1, v2){
degs(acos(dot(v1, v2) / (sqrt(sum(v1^2)) * sqrt(sum(v2^2)))))
}
theta(A.eigen$vectors[,1], A.eigen$vectors[,2])
install.packages("matrixcalc")
library("matrixcalc")
A.eigen
is.positive.definite(A)
calculation.e <- function(v, t){
tinv <- inv(t)
prd <- t(tinv) %*% v
t(prd) %*% t
}
calculation.e(A, A.eigen$vectors)
sum(diag(A))
A %*% A
install.packages("matrixcalc")
library(matlab)
library(pracma)
library("matrixcalc")
A <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(A)
det(A)
qr(A)$rank
rref(A)
A.eigen <- eigen(A)
A.eigen
degs<-function(rads) {
round(rads*180/pi, digits = 0)
}
theta <- function(v1, v2){
degs(acos(dot(v1, v2) / (sqrt(sum(v1^2)) * sqrt(sum(v2^2)))))
}
theta(A.eigen$vectors[,1], A.eigen$vectors[,2])
install.packages("matrixcalc")
library("matrixcalc")
A.eigen
is.positive.definite(A)
calculation.e <- function(v, t){
tinv <- inv(t)
prd <- t(tinv) %*% v
t(prd) %*% t
}
calculation.e(A, A.eigen$vectors)
sum(diag(A))
A %*% A
install.packages("matrixcalc")
library(matlab)
library(pracma)
library("matrixcalc")
A <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(A)
det(A)
qr(A)$rank
rref(A)
A.eigen <- eigen(A)
A.eigen
degs<-function(rads) {
round(rads*180/pi, digits = 0)
}
theta <- function(v1, v2){
degs(acos(dot(v1, v2) / (sqrt(sum(v1^2)) * sqrt(sum(v2^2)))))
}
theta(A.eigen$vectors[,1], A.eigen$vectors[,2])
A.eigen
is.positive.definite(A)
calculation.e <- function(v, t){
tinv <- inv(t)
prd <- t(tinv) %*% v
t(prd) %*% t
}
calculation.e(A, A.eigen$vectors)
sum(diag(A))
A %*% A
calculation.e <- function(v, t){
tinv <- inv(t)
prd <- tinv %*% v
prd %*% t
}
calculation.e(A, A.eigen$vectors)
calculation.e <- function(v, t){
tinv <- inv(t)
prd <- tinv %*% v
prd %*% t
}
T <- A.eigen$vectors
calculation.e(A, T)
calculation.e <- function(v, t){
tinv <- inv(t)
prd <- tinv %*% v
prd %*% t
}
T <- A.eigen$vectors
calculation.e(A, T)
inv(T) %*% A %*% T
calculation.e <- function(v, t){
tinv <- inv(t)
prd <- tinv %*% v
prd %*% t
}
T <- A.eigen$vectors
calculation.e(A, T)
inv(T) %*% A %*% T
calculation.e <- function(v, t){
tinv <- inv(t)
prd <- tinv %*% v
prd %*% t
}
T <- A.eigen$vectors
calculation.e(A, T)
T <- A.eigen$vectors
inv(T) %*% A %*% T
unlink('~/Development/osu/machine-learning/osu-mach-learn/Untitled_cache', recursive = TRUE)
getwd()
setwd("/Users/hughj/Development/osu/machine-learning/osu-mach-learn")
require(knitr)
require(markdown)
knit("Untitled.Rmd")
?system
library(matlab)
library(pracma)
library("matrixcalc")
A <- matrix(c(8,-1,2,-1,2,-2,2,-2,3),3,3,byrow = TRUE)
print(A)
det(A)
qr(A)$rank
rref(A)
A.eigen <- eigen(A)
A.eigen
degs<-function(rads) {
round(rads*180/pi, digits = 0)
}
theta <- function(v1, v2){
degs(acos(dot(v1, v2) / (sqrt(sum(v1^2)) * sqrt(sum(v2^2)))))
}
theta(A.eigen$vectors[,1], A.eigen$vectors[,2])
A.eigen
is.positive.definite(A)
calculation.e <- function(v, t){
tinv <- inv(t)
prd <- tinv %*% v
prd %*% t
}
T <- A.eigen$vectors
calculation.e(A, T)
T <- A.eigen$vectors
inv(T) %*% A %*% T
sum(diag(A))
A %*% A
